buildscript {
    repositories {
	mavenCentral()
    }

}


plugins {
	id 'jacoco'
	id "org.sonarqube" version "2.8"
	id 'maven-publish'
	id 'java-library'
}

group 'co.com.bancolombia.commons.secretsmanager'
version System.getProperty('version')

repositories {
	mavenCentral()
}


dependencies {
	compile platform('software.amazon.awssdk:bom:2.13.10')
	compile 'software.amazon.awssdk:secretsmanager'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'

	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
	testCompile 'org.mockito:mockito-core:2.28.2'
	testImplementation 'junit:junit:4.12'
}


jar {
    manifest.attributes provider: 'IngenierÃ­a de Software'
	archivesBaseName = 'secretsmanager'
	version = "$version"
}

sonarqube {
	properties {
		property "sonar.projectKey", "bancolombia_secrets-manager"
		property "sonar.organization", "grupo-bancolombia"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.sources", "src/main/java,build.gradle"
		property "sonar.java.binaries", "build/classes"
		property "sonar.junit.reportPaths", "build/test-results/test"
		property "sonar.java-coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.test", "src/test/java"
		property "sonar.exclusions", ".github/**"
		property "sonar.coverage.exclusions", "src/test/**"
		property "sonar.sourceEncoding", "UTF-8"
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.github.bancolombia'
            artifactId 'secrets-manager'
            version '1.0.1'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Serialize and Deserialize Json-LD into Java entities'
            name 'Schema.org Java'
            url 'https://github.com/mautini/schemaorg-java'
            organization {
                name 'com.github.mautini'
                url 'https://github.com/mautini'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/mautini/schemaorg-java/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/mautini/schemaorg-java/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/mautini/schemaorg-java'
                connection 'scm:git:git://github.com/mautini/schemaorg-java.git'
                developerConnection 'scm:git:ssh://git@github.com:mautini/schemaorg-java.git'
            }
            developers {
                developer {
                    name 'Mautini'
                }
            }
        }
    }
}
